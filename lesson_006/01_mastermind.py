# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import make_number, check_number
from termcolor import cprint

while True:
    game_number = make_number()
    cprint('Задумано число: XXXX', color='red', attrs=['bold', 'reverse'])
    attempts_number = 0
    while True:
        cprint('Введите 4-х значное число:', color='green', attrs=['bold'])
        get_number = input()
        check_result = check_number(get_number, game_number)
        if not check_result:
            cprint('Некорректный ввод', color='red', attrs=['bold'])
        else:
            attempts_number += 1
            if check_result.get('bulls') == 4:
                cprint('ПОЗДРАВЛЯЮ!!!! ВЫ ПОБЕДИЛИ!!!', color='red', attrs=['bold', 'reverse'])
                print('Количество попыток: ', attempts_number)
                break
            else:
                print('Быки - ', check_result.get('bulls'), '   Коровы - ', check_result.get('cows'))
    game_over = False
    while True:
        cprint('Хотите еще партию? Y/N', color='cyan', attrs=['bold'])
        answer = input()
        if answer == 'Y' or answer == 'y':
            break
        elif answer == 'N' or answer == 'n':
            game_over = True
            break
        else:
            print('Некорректный ввод, введите Y для новой игры  или N для завершения')
    if game_over:
        break
